Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression + expression
Rule 2     expression -> expression - expression
Rule 3     expression -> expression * expression
Rule 4     expression -> expression / expression
Rule 5     expression -> expression ^ expression
Rule 6     logic -> expression EQ expression
Rule 7     logic -> expression NEQ expression
Rule 8     logic -> expression LE expression
Rule 9     logic -> expression GE expression
Rule 10    logic -> expression < expression
Rule 11    logic -> expression > expression
Rule 12    logic -> logic AND logic
Rule 13    logic -> logic OR logic
Rule 14    logic -> ! logic
Rule 15    expression -> - expression
Rule 16    expression -> logic ? expression : expression
Rule 17    expression -> ( expression )
Rule 18    logic -> ( logic )
Rule 19    expression -> ID
Rule 20    expression -> NUMBER
Rule 21    expression -> ID ( list )
Rule 22    expression -> SUM [ ID ] seen_sum ( list )
Rule 23    seen_sum -> <empty>
Rule 24    expression -> ID DEFINE expression
Rule 25    list -> expression
Rule 26    list -> expression , list

Terminals, with rules where they appear

!                    : 14
(                    : 17 18 21 22
)                    : 17 18 21 22
*                    : 3
+                    : 1
,                    : 26
-                    : 2 15
/                    : 4
:                    : 16
<                    : 10
>                    : 11
?                    : 16
AND                  : 12
DEFINE               : 24
EQ                   : 6
GE                   : 9
ID                   : 19 21 22 24
LE                   : 8
NEQ                  : 7
NUMBER               : 20
OR                   : 13
SUM                  : 22
[                    : 22
]                    : 22
^                    : 5
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 15 16 16 17 24 25 26 0
list                 : 21 22 26
logic                : 12 12 13 13 14 16 18
seen_sum             : 22

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 1
    logic                          shift and go to state 3

state 1

    (0) S' -> expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19


state 2

    (15) expression -> - . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 20
    logic                          shift and go to state 3

state 3

    (16) expression -> logic . ? expression : expression
    (12) logic -> logic . AND logic
    (13) logic -> logic . OR logic

    ?               shift and go to state 21
    AND             shift and go to state 22
    OR              shift and go to state 23


state 4

    (17) expression -> ( . expression )
    (18) logic -> ( . logic )
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 24
    logic                          shift and go to state 25

state 5

    (19) expression -> ID .
    (21) expression -> ID . ( list )
    (24) expression -> ID . DEFINE expression

    +               reduce using rule 19 (expression -> ID .)
    -               reduce using rule 19 (expression -> ID .)
    *               reduce using rule 19 (expression -> ID .)
    /               reduce using rule 19 (expression -> ID .)
    ^               reduce using rule 19 (expression -> ID .)
    EQ              reduce using rule 19 (expression -> ID .)
    NEQ             reduce using rule 19 (expression -> ID .)
    LE              reduce using rule 19 (expression -> ID .)
    GE              reduce using rule 19 (expression -> ID .)
    <               reduce using rule 19 (expression -> ID .)
    >               reduce using rule 19 (expression -> ID .)
    $end            reduce using rule 19 (expression -> ID .)
    )               reduce using rule 19 (expression -> ID .)
    ?               reduce using rule 19 (expression -> ID .)
    AND             reduce using rule 19 (expression -> ID .)
    OR              reduce using rule 19 (expression -> ID .)
    :               reduce using rule 19 (expression -> ID .)
    ,               reduce using rule 19 (expression -> ID .)
    (               shift and go to state 26
    DEFINE          shift and go to state 27


state 6

    (20) expression -> NUMBER .

    +               reduce using rule 20 (expression -> NUMBER .)
    -               reduce using rule 20 (expression -> NUMBER .)
    *               reduce using rule 20 (expression -> NUMBER .)
    /               reduce using rule 20 (expression -> NUMBER .)
    ^               reduce using rule 20 (expression -> NUMBER .)
    EQ              reduce using rule 20 (expression -> NUMBER .)
    NEQ             reduce using rule 20 (expression -> NUMBER .)
    LE              reduce using rule 20 (expression -> NUMBER .)
    GE              reduce using rule 20 (expression -> NUMBER .)
    <               reduce using rule 20 (expression -> NUMBER .)
    >               reduce using rule 20 (expression -> NUMBER .)
    $end            reduce using rule 20 (expression -> NUMBER .)
    )               reduce using rule 20 (expression -> NUMBER .)
    ?               reduce using rule 20 (expression -> NUMBER .)
    AND             reduce using rule 20 (expression -> NUMBER .)
    OR              reduce using rule 20 (expression -> NUMBER .)
    :               reduce using rule 20 (expression -> NUMBER .)
    ,               reduce using rule 20 (expression -> NUMBER .)


state 7

    (22) expression -> SUM . [ ID ] seen_sum ( list )

    [               shift and go to state 28


state 8

    (14) logic -> ! . logic
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression

    !               shift and go to state 8
    (               shift and go to state 31
    -               shift and go to state 2
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7

    logic                          shift and go to state 29
    expression                     shift and go to state 30

state 9

    (1) expression -> expression + . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 32
    logic                          shift and go to state 3

state 10

    (2) expression -> expression - . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 33
    logic                          shift and go to state 3

state 11

    (3) expression -> expression * . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 34
    logic                          shift and go to state 3

state 12

    (4) expression -> expression / . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 35
    logic                          shift and go to state 3

state 13

    (5) expression -> expression ^ . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 36
    logic                          shift and go to state 3

state 14

    (6) logic -> expression EQ . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 37
    logic                          shift and go to state 3

state 15

    (7) logic -> expression NEQ . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 38
    logic                          shift and go to state 3

state 16

    (8) logic -> expression LE . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 39
    logic                          shift and go to state 3

state 17

    (9) logic -> expression GE . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 40
    logic                          shift and go to state 3

state 18

    (10) logic -> expression < . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 41
    logic                          shift and go to state 3

state 19

    (11) logic -> expression > . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 42
    logic                          shift and go to state 3

state 20

    (15) expression -> - expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               reduce using rule 15 (expression -> - expression .)
    -               reduce using rule 15 (expression -> - expression .)
    *               reduce using rule 15 (expression -> - expression .)
    /               reduce using rule 15 (expression -> - expression .)
    ^               reduce using rule 15 (expression -> - expression .)
    EQ              reduce using rule 15 (expression -> - expression .)
    NEQ             reduce using rule 15 (expression -> - expression .)
    LE              reduce using rule 15 (expression -> - expression .)
    GE              reduce using rule 15 (expression -> - expression .)
    <               reduce using rule 15 (expression -> - expression .)
    >               reduce using rule 15 (expression -> - expression .)
    $end            reduce using rule 15 (expression -> - expression .)
    )               reduce using rule 15 (expression -> - expression .)
    ?               reduce using rule 15 (expression -> - expression .)
    AND             reduce using rule 15 (expression -> - expression .)
    OR              reduce using rule 15 (expression -> - expression .)
    :               reduce using rule 15 (expression -> - expression .)
    ,               reduce using rule 15 (expression -> - expression .)

  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 12 ]
  ! ^               [ shift and go to state 13 ]
  ! EQ              [ shift and go to state 14 ]
  ! NEQ             [ shift and go to state 15 ]
  ! LE              [ shift and go to state 16 ]
  ! GE              [ shift and go to state 17 ]
  ! <               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]


state 21

    (16) expression -> logic ? . expression : expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    logic                          shift and go to state 3
    expression                     shift and go to state 43

state 22

    (12) logic -> logic AND . logic
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression

    !               shift and go to state 8
    (               shift and go to state 31
    -               shift and go to state 2
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7

    logic                          shift and go to state 44
    expression                     shift and go to state 30

state 23

    (13) logic -> logic OR . logic
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression

    !               shift and go to state 8
    (               shift and go to state 31
    -               shift and go to state 2
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7

    logic                          shift and go to state 45
    expression                     shift and go to state 30

state 24

    (17) expression -> ( expression . )
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    )               shift and go to state 46
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19


state 25

    (18) logic -> ( logic . )
    (16) expression -> logic . ? expression : expression
    (12) logic -> logic . AND logic
    (13) logic -> logic . OR logic

    )               shift and go to state 47
    ?               shift and go to state 21
    AND             shift and go to state 22
    OR              shift and go to state 23


state 26

    (21) expression -> ID ( . list )
    (25) list -> . expression
    (26) list -> . expression , list
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    list                           shift and go to state 48
    expression                     shift and go to state 49
    logic                          shift and go to state 3

state 27

    (24) expression -> ID DEFINE . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 50
    logic                          shift and go to state 3

state 28

    (22) expression -> SUM [ . ID ] seen_sum ( list )

    ID              shift and go to state 51


state 29

    (14) logic -> ! logic .
    (12) logic -> logic . AND logic
    (13) logic -> logic . OR logic
    (16) expression -> logic . ? expression : expression

    ?               reduce using rule 14 (logic -> ! logic .)
    AND             reduce using rule 14 (logic -> ! logic .)
    OR              reduce using rule 14 (logic -> ! logic .)
    )               reduce using rule 14 (logic -> ! logic .)

  ! AND             [ shift and go to state 22 ]
  ! OR              [ shift and go to state 23 ]
  ! ?               [ shift and go to state 21 ]


state 30

    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression

    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13


state 31

    (18) logic -> ( . logic )
    (17) expression -> ( . expression )
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression

    !               shift and go to state 8
    (               shift and go to state 31
    -               shift and go to state 2
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7

    logic                          shift and go to state 52
    expression                     shift and go to state 53

state 32

    (1) expression -> expression + expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               reduce using rule 1 (expression -> expression + expression .)
    -               reduce using rule 1 (expression -> expression + expression .)
    EQ              reduce using rule 1 (expression -> expression + expression .)
    NEQ             reduce using rule 1 (expression -> expression + expression .)
    LE              reduce using rule 1 (expression -> expression + expression .)
    GE              reduce using rule 1 (expression -> expression + expression .)
    <               reduce using rule 1 (expression -> expression + expression .)
    >               reduce using rule 1 (expression -> expression + expression .)
    $end            reduce using rule 1 (expression -> expression + expression .)
    )               reduce using rule 1 (expression -> expression + expression .)
    ?               reduce using rule 1 (expression -> expression + expression .)
    AND             reduce using rule 1 (expression -> expression + expression .)
    OR              reduce using rule 1 (expression -> expression + expression .)
    :               reduce using rule 1 (expression -> expression + expression .)
    ,               reduce using rule 1 (expression -> expression + expression .)
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13

  ! *               [ reduce using rule 1 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 1 (expression -> expression + expression .) ]
  ! ^               [ reduce using rule 1 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! EQ              [ shift and go to state 14 ]
  ! NEQ             [ shift and go to state 15 ]
  ! LE              [ shift and go to state 16 ]
  ! GE              [ shift and go to state 17 ]
  ! <               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]


state 33

    (2) expression -> expression - expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               reduce using rule 2 (expression -> expression - expression .)
    -               reduce using rule 2 (expression -> expression - expression .)
    EQ              reduce using rule 2 (expression -> expression - expression .)
    NEQ             reduce using rule 2 (expression -> expression - expression .)
    LE              reduce using rule 2 (expression -> expression - expression .)
    GE              reduce using rule 2 (expression -> expression - expression .)
    <               reduce using rule 2 (expression -> expression - expression .)
    >               reduce using rule 2 (expression -> expression - expression .)
    $end            reduce using rule 2 (expression -> expression - expression .)
    )               reduce using rule 2 (expression -> expression - expression .)
    ?               reduce using rule 2 (expression -> expression - expression .)
    AND             reduce using rule 2 (expression -> expression - expression .)
    OR              reduce using rule 2 (expression -> expression - expression .)
    :               reduce using rule 2 (expression -> expression - expression .)
    ,               reduce using rule 2 (expression -> expression - expression .)
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13

  ! *               [ reduce using rule 2 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 2 (expression -> expression - expression .) ]
  ! ^               [ reduce using rule 2 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! EQ              [ shift and go to state 14 ]
  ! NEQ             [ shift and go to state 15 ]
  ! LE              [ shift and go to state 16 ]
  ! GE              [ shift and go to state 17 ]
  ! <               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]


state 34

    (3) expression -> expression * expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               reduce using rule 3 (expression -> expression * expression .)
    -               reduce using rule 3 (expression -> expression * expression .)
    *               reduce using rule 3 (expression -> expression * expression .)
    /               reduce using rule 3 (expression -> expression * expression .)
    EQ              reduce using rule 3 (expression -> expression * expression .)
    NEQ             reduce using rule 3 (expression -> expression * expression .)
    LE              reduce using rule 3 (expression -> expression * expression .)
    GE              reduce using rule 3 (expression -> expression * expression .)
    <               reduce using rule 3 (expression -> expression * expression .)
    >               reduce using rule 3 (expression -> expression * expression .)
    $end            reduce using rule 3 (expression -> expression * expression .)
    )               reduce using rule 3 (expression -> expression * expression .)
    ?               reduce using rule 3 (expression -> expression * expression .)
    AND             reduce using rule 3 (expression -> expression * expression .)
    OR              reduce using rule 3 (expression -> expression * expression .)
    :               reduce using rule 3 (expression -> expression * expression .)
    ,               reduce using rule 3 (expression -> expression * expression .)
    ^               shift and go to state 13

  ! ^               [ reduce using rule 3 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 12 ]
  ! EQ              [ shift and go to state 14 ]
  ! NEQ             [ shift and go to state 15 ]
  ! LE              [ shift and go to state 16 ]
  ! GE              [ shift and go to state 17 ]
  ! <               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]


state 35

    (4) expression -> expression / expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               reduce using rule 4 (expression -> expression / expression .)
    -               reduce using rule 4 (expression -> expression / expression .)
    *               reduce using rule 4 (expression -> expression / expression .)
    /               reduce using rule 4 (expression -> expression / expression .)
    EQ              reduce using rule 4 (expression -> expression / expression .)
    NEQ             reduce using rule 4 (expression -> expression / expression .)
    LE              reduce using rule 4 (expression -> expression / expression .)
    GE              reduce using rule 4 (expression -> expression / expression .)
    <               reduce using rule 4 (expression -> expression / expression .)
    >               reduce using rule 4 (expression -> expression / expression .)
    $end            reduce using rule 4 (expression -> expression / expression .)
    )               reduce using rule 4 (expression -> expression / expression .)
    ?               reduce using rule 4 (expression -> expression / expression .)
    AND             reduce using rule 4 (expression -> expression / expression .)
    OR              reduce using rule 4 (expression -> expression / expression .)
    :               reduce using rule 4 (expression -> expression / expression .)
    ,               reduce using rule 4 (expression -> expression / expression .)
    ^               shift and go to state 13

  ! ^               [ reduce using rule 4 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 12 ]
  ! EQ              [ shift and go to state 14 ]
  ! NEQ             [ shift and go to state 15 ]
  ! LE              [ shift and go to state 16 ]
  ! GE              [ shift and go to state 17 ]
  ! <               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]


state 36

    (5) expression -> expression ^ expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               reduce using rule 5 (expression -> expression ^ expression .)
    -               reduce using rule 5 (expression -> expression ^ expression .)
    *               reduce using rule 5 (expression -> expression ^ expression .)
    /               reduce using rule 5 (expression -> expression ^ expression .)
    ^               reduce using rule 5 (expression -> expression ^ expression .)
    EQ              reduce using rule 5 (expression -> expression ^ expression .)
    NEQ             reduce using rule 5 (expression -> expression ^ expression .)
    LE              reduce using rule 5 (expression -> expression ^ expression .)
    GE              reduce using rule 5 (expression -> expression ^ expression .)
    <               reduce using rule 5 (expression -> expression ^ expression .)
    >               reduce using rule 5 (expression -> expression ^ expression .)
    $end            reduce using rule 5 (expression -> expression ^ expression .)
    )               reduce using rule 5 (expression -> expression ^ expression .)
    ?               reduce using rule 5 (expression -> expression ^ expression .)
    AND             reduce using rule 5 (expression -> expression ^ expression .)
    OR              reduce using rule 5 (expression -> expression ^ expression .)
    :               reduce using rule 5 (expression -> expression ^ expression .)
    ,               reduce using rule 5 (expression -> expression ^ expression .)

  ! +               [ shift and go to state 9 ]
  ! -               [ shift and go to state 10 ]
  ! *               [ shift and go to state 11 ]
  ! /               [ shift and go to state 12 ]
  ! ^               [ shift and go to state 13 ]
  ! EQ              [ shift and go to state 14 ]
  ! NEQ             [ shift and go to state 15 ]
  ! LE              [ shift and go to state 16 ]
  ! GE              [ shift and go to state 17 ]
  ! <               [ shift and go to state 18 ]
  ! >               [ shift and go to state 19 ]


state 37

    (6) logic -> expression EQ expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    ?               reduce using rule 6 (logic -> expression EQ expression .)
    AND             reduce using rule 6 (logic -> expression EQ expression .)
    OR              reduce using rule 6 (logic -> expression EQ expression .)
    )               reduce using rule 6 (logic -> expression EQ expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19


state 38

    (7) logic -> expression NEQ expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    ?               reduce using rule 7 (logic -> expression NEQ expression .)
    AND             reduce using rule 7 (logic -> expression NEQ expression .)
    OR              reduce using rule 7 (logic -> expression NEQ expression .)
    )               reduce using rule 7 (logic -> expression NEQ expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19


state 39

    (8) logic -> expression LE expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    ?               reduce using rule 8 (logic -> expression LE expression .)
    AND             reduce using rule 8 (logic -> expression LE expression .)
    OR              reduce using rule 8 (logic -> expression LE expression .)
    )               reduce using rule 8 (logic -> expression LE expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19


state 40

    (9) logic -> expression GE expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    ?               reduce using rule 9 (logic -> expression GE expression .)
    AND             reduce using rule 9 (logic -> expression GE expression .)
    OR              reduce using rule 9 (logic -> expression GE expression .)
    )               reduce using rule 9 (logic -> expression GE expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19


state 41

    (10) logic -> expression < expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    ?               reduce using rule 10 (logic -> expression < expression .)
    AND             reduce using rule 10 (logic -> expression < expression .)
    OR              reduce using rule 10 (logic -> expression < expression .)
    )               reduce using rule 10 (logic -> expression < expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19


state 42

    (11) logic -> expression > expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    ?               reduce using rule 11 (logic -> expression > expression .)
    AND             reduce using rule 11 (logic -> expression > expression .)
    OR              reduce using rule 11 (logic -> expression > expression .)
    )               reduce using rule 11 (logic -> expression > expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19


state 43

    (16) expression -> logic ? expression . : expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    :               shift and go to state 54
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19


state 44

    (12) logic -> logic AND logic .
    (12) logic -> logic . AND logic
    (13) logic -> logic . OR logic
    (16) expression -> logic . ? expression : expression

    ?               reduce using rule 12 (logic -> logic AND logic .)
    AND             reduce using rule 12 (logic -> logic AND logic .)
    OR              reduce using rule 12 (logic -> logic AND logic .)
    )               reduce using rule 12 (logic -> logic AND logic .)

  ! AND             [ shift and go to state 22 ]
  ! OR              [ shift and go to state 23 ]
  ! ?               [ shift and go to state 21 ]


state 45

    (13) logic -> logic OR logic .
    (12) logic -> logic . AND logic
    (13) logic -> logic . OR logic
    (16) expression -> logic . ? expression : expression

    ?               reduce using rule 13 (logic -> logic OR logic .)
    OR              reduce using rule 13 (logic -> logic OR logic .)
    )               reduce using rule 13 (logic -> logic OR logic .)
    AND             shift and go to state 22

  ! AND             [ reduce using rule 13 (logic -> logic OR logic .) ]
  ! OR              [ shift and go to state 23 ]
  ! ?               [ shift and go to state 21 ]


state 46

    (17) expression -> ( expression ) .

    +               reduce using rule 17 (expression -> ( expression ) .)
    -               reduce using rule 17 (expression -> ( expression ) .)
    *               reduce using rule 17 (expression -> ( expression ) .)
    /               reduce using rule 17 (expression -> ( expression ) .)
    ^               reduce using rule 17 (expression -> ( expression ) .)
    EQ              reduce using rule 17 (expression -> ( expression ) .)
    NEQ             reduce using rule 17 (expression -> ( expression ) .)
    LE              reduce using rule 17 (expression -> ( expression ) .)
    GE              reduce using rule 17 (expression -> ( expression ) .)
    <               reduce using rule 17 (expression -> ( expression ) .)
    >               reduce using rule 17 (expression -> ( expression ) .)
    $end            reduce using rule 17 (expression -> ( expression ) .)
    )               reduce using rule 17 (expression -> ( expression ) .)
    ?               reduce using rule 17 (expression -> ( expression ) .)
    AND             reduce using rule 17 (expression -> ( expression ) .)
    OR              reduce using rule 17 (expression -> ( expression ) .)
    :               reduce using rule 17 (expression -> ( expression ) .)
    ,               reduce using rule 17 (expression -> ( expression ) .)


state 47

    (18) logic -> ( logic ) .

    ?               reduce using rule 18 (logic -> ( logic ) .)
    AND             reduce using rule 18 (logic -> ( logic ) .)
    OR              reduce using rule 18 (logic -> ( logic ) .)
    )               reduce using rule 18 (logic -> ( logic ) .)


state 48

    (21) expression -> ID ( list . )

    )               shift and go to state 55


state 49

    (25) list -> expression .
    (26) list -> expression . , list
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    )               reduce using rule 25 (list -> expression .)
    ,               shift and go to state 56
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19


state 50

    (24) expression -> ID DEFINE expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    $end            reduce using rule 24 (expression -> ID DEFINE expression .)
    )               reduce using rule 24 (expression -> ID DEFINE expression .)
    ?               reduce using rule 24 (expression -> ID DEFINE expression .)
    AND             reduce using rule 24 (expression -> ID DEFINE expression .)
    OR              reduce using rule 24 (expression -> ID DEFINE expression .)
    :               reduce using rule 24 (expression -> ID DEFINE expression .)
    ,               reduce using rule 24 (expression -> ID DEFINE expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19

  ! +               [ reduce using rule 24 (expression -> ID DEFINE expression .) ]
  ! -               [ reduce using rule 24 (expression -> ID DEFINE expression .) ]
  ! *               [ reduce using rule 24 (expression -> ID DEFINE expression .) ]
  ! /               [ reduce using rule 24 (expression -> ID DEFINE expression .) ]
  ! ^               [ reduce using rule 24 (expression -> ID DEFINE expression .) ]
  ! EQ              [ reduce using rule 24 (expression -> ID DEFINE expression .) ]
  ! NEQ             [ reduce using rule 24 (expression -> ID DEFINE expression .) ]
  ! LE              [ reduce using rule 24 (expression -> ID DEFINE expression .) ]
  ! GE              [ reduce using rule 24 (expression -> ID DEFINE expression .) ]
  ! <               [ reduce using rule 24 (expression -> ID DEFINE expression .) ]
  ! >               [ reduce using rule 24 (expression -> ID DEFINE expression .) ]


state 51

    (22) expression -> SUM [ ID . ] seen_sum ( list )

    ]               shift and go to state 57


state 52

    (18) logic -> ( logic . )
    (12) logic -> logic . AND logic
    (13) logic -> logic . OR logic
    (16) expression -> logic . ? expression : expression

    )               shift and go to state 47
    AND             shift and go to state 22
    OR              shift and go to state 23
    ?               shift and go to state 21


state 53

    (17) expression -> ( expression . )
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression

    )               shift and go to state 46
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13


state 54

    (16) expression -> logic ? expression : . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    logic                          shift and go to state 3
    expression                     shift and go to state 58

state 55

    (21) expression -> ID ( list ) .

    +               reduce using rule 21 (expression -> ID ( list ) .)
    -               reduce using rule 21 (expression -> ID ( list ) .)
    *               reduce using rule 21 (expression -> ID ( list ) .)
    /               reduce using rule 21 (expression -> ID ( list ) .)
    ^               reduce using rule 21 (expression -> ID ( list ) .)
    EQ              reduce using rule 21 (expression -> ID ( list ) .)
    NEQ             reduce using rule 21 (expression -> ID ( list ) .)
    LE              reduce using rule 21 (expression -> ID ( list ) .)
    GE              reduce using rule 21 (expression -> ID ( list ) .)
    <               reduce using rule 21 (expression -> ID ( list ) .)
    >               reduce using rule 21 (expression -> ID ( list ) .)
    $end            reduce using rule 21 (expression -> ID ( list ) .)
    )               reduce using rule 21 (expression -> ID ( list ) .)
    ?               reduce using rule 21 (expression -> ID ( list ) .)
    AND             reduce using rule 21 (expression -> ID ( list ) .)
    OR              reduce using rule 21 (expression -> ID ( list ) .)
    :               reduce using rule 21 (expression -> ID ( list ) .)
    ,               reduce using rule 21 (expression -> ID ( list ) .)


state 56

    (26) list -> expression , . list
    (25) list -> . expression
    (26) list -> . expression , list
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    expression                     shift and go to state 49
    list                           shift and go to state 59
    logic                          shift and go to state 3

state 57

    (22) expression -> SUM [ ID ] . seen_sum ( list )
    (23) seen_sum -> .

    (               reduce using rule 23 (seen_sum -> .)

    seen_sum                       shift and go to state 60

state 58

    (16) expression -> logic ? expression : expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    $end            reduce using rule 16 (expression -> logic ? expression : expression .)
    )               reduce using rule 16 (expression -> logic ? expression : expression .)
    ?               reduce using rule 16 (expression -> logic ? expression : expression .)
    AND             reduce using rule 16 (expression -> logic ? expression : expression .)
    OR              reduce using rule 16 (expression -> logic ? expression : expression .)
    :               reduce using rule 16 (expression -> logic ? expression : expression .)
    ,               reduce using rule 16 (expression -> logic ? expression : expression .)
    +               shift and go to state 9
    -               shift and go to state 10
    *               shift and go to state 11
    /               shift and go to state 12
    ^               shift and go to state 13
    EQ              shift and go to state 14
    NEQ             shift and go to state 15
    LE              shift and go to state 16
    GE              shift and go to state 17
    <               shift and go to state 18
    >               shift and go to state 19

  ! +               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! -               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! *               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! /               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! ^               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! EQ              [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! NEQ             [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! LE              [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! GE              [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! <               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! >               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]


state 59

    (26) list -> expression , list .

    )               reduce using rule 26 (list -> expression , list .)


state 60

    (22) expression -> SUM [ ID ] seen_sum . ( list )

    (               shift and go to state 61


state 61

    (22) expression -> SUM [ ID ] seen_sum ( . list )
    (25) list -> . expression
    (26) list -> . expression , list
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . SUM [ ID ] seen_sum ( list )
    (24) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    SUM             shift and go to state 7
    !               shift and go to state 8

    list                           shift and go to state 62
    expression                     shift and go to state 49
    logic                          shift and go to state 3

state 62

    (22) expression -> SUM [ ID ] seen_sum ( list . )

    )               shift and go to state 63


state 63

    (22) expression -> SUM [ ID ] seen_sum ( list ) .

    +               reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    -               reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    *               reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    /               reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    ^               reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    EQ              reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    NEQ             reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    LE              reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    GE              reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    <               reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    >               reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    $end            reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    )               reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    ?               reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    AND             reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    OR              reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    :               reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)
    ,               reduce using rule 22 (expression -> SUM [ ID ] seen_sum ( list ) .)

