Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression + expression
Rule 2     expression -> expression - expression
Rule 3     expression -> expression * expression
Rule 4     expression -> expression / expression
Rule 5     expression -> expression ^ expression
Rule 6     logic -> expression EQ expression
Rule 7     logic -> expression NEQ expression
Rule 8     logic -> expression LE expression
Rule 9     logic -> expression GE expression
Rule 10    logic -> expression < expression
Rule 11    logic -> expression > expression
Rule 12    logic -> logic AND logic
Rule 13    logic -> logic OR logic
Rule 14    logic -> ! logic
Rule 15    expression -> - expression
Rule 16    expression -> logic ? expression : expression
Rule 17    expression -> ( expression )
Rule 18    logic -> ( logic )
Rule 19    expression -> ID
Rule 20    expression -> NUMBER
Rule 21    expression -> ID ( list )
Rule 22    expression -> ID DEFINE expression
Rule 23    list -> expression
Rule 24    list -> expression , list

Terminals, with rules where they appear

!                    : 14
(                    : 17 18 21
)                    : 17 18 21
*                    : 3
+                    : 1
,                    : 24
-                    : 2 15
/                    : 4
:                    : 16
<                    : 10
>                    : 11
?                    : 16
AND                  : 12
DEFINE               : 22
EQ                   : 6
GE                   : 9
ID                   : 19 21 22
LE                   : 8
NEQ                  : 7
NUMBER               : 20
OR                   : 13
^                    : 5
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 11 11 15 16 16 17 22 23 24 0
list                 : 21 24
logic                : 12 12 13 13 14 16 18

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 1
    logic                          shift and go to state 3

state 1

    (0) S' -> expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18


state 2

    (15) expression -> - . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 19
    logic                          shift and go to state 3

state 3

    (16) expression -> logic . ? expression : expression
    (12) logic -> logic . AND logic
    (13) logic -> logic . OR logic

    ?               shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22


state 4

    (17) expression -> ( . expression )
    (18) logic -> ( . logic )
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 23
    logic                          shift and go to state 24

state 5

    (19) expression -> ID .
    (21) expression -> ID . ( list )
    (22) expression -> ID . DEFINE expression

    +               reduce using rule 19 (expression -> ID .)
    -               reduce using rule 19 (expression -> ID .)
    *               reduce using rule 19 (expression -> ID .)
    /               reduce using rule 19 (expression -> ID .)
    ^               reduce using rule 19 (expression -> ID .)
    EQ              reduce using rule 19 (expression -> ID .)
    NEQ             reduce using rule 19 (expression -> ID .)
    LE              reduce using rule 19 (expression -> ID .)
    GE              reduce using rule 19 (expression -> ID .)
    <               reduce using rule 19 (expression -> ID .)
    >               reduce using rule 19 (expression -> ID .)
    $end            reduce using rule 19 (expression -> ID .)
    )               reduce using rule 19 (expression -> ID .)
    ?               reduce using rule 19 (expression -> ID .)
    AND             reduce using rule 19 (expression -> ID .)
    OR              reduce using rule 19 (expression -> ID .)
    :               reduce using rule 19 (expression -> ID .)
    ,               reduce using rule 19 (expression -> ID .)
    (               shift and go to state 25
    DEFINE          shift and go to state 26


state 6

    (20) expression -> NUMBER .

    +               reduce using rule 20 (expression -> NUMBER .)
    -               reduce using rule 20 (expression -> NUMBER .)
    *               reduce using rule 20 (expression -> NUMBER .)
    /               reduce using rule 20 (expression -> NUMBER .)
    ^               reduce using rule 20 (expression -> NUMBER .)
    EQ              reduce using rule 20 (expression -> NUMBER .)
    NEQ             reduce using rule 20 (expression -> NUMBER .)
    LE              reduce using rule 20 (expression -> NUMBER .)
    GE              reduce using rule 20 (expression -> NUMBER .)
    <               reduce using rule 20 (expression -> NUMBER .)
    >               reduce using rule 20 (expression -> NUMBER .)
    $end            reduce using rule 20 (expression -> NUMBER .)
    )               reduce using rule 20 (expression -> NUMBER .)
    ?               reduce using rule 20 (expression -> NUMBER .)
    AND             reduce using rule 20 (expression -> NUMBER .)
    OR              reduce using rule 20 (expression -> NUMBER .)
    :               reduce using rule 20 (expression -> NUMBER .)
    ,               reduce using rule 20 (expression -> NUMBER .)


state 7

    (14) logic -> ! . logic
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression

    !               shift and go to state 7
    (               shift and go to state 29
    -               shift and go to state 2
    ID              shift and go to state 5
    NUMBER          shift and go to state 6

    logic                          shift and go to state 27
    expression                     shift and go to state 28

state 8

    (1) expression -> expression + . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 30
    logic                          shift and go to state 3

state 9

    (2) expression -> expression - . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 31
    logic                          shift and go to state 3

state 10

    (3) expression -> expression * . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 32
    logic                          shift and go to state 3

state 11

    (4) expression -> expression / . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 33
    logic                          shift and go to state 3

state 12

    (5) expression -> expression ^ . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 34
    logic                          shift and go to state 3

state 13

    (6) logic -> expression EQ . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 35
    logic                          shift and go to state 3

state 14

    (7) logic -> expression NEQ . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 36
    logic                          shift and go to state 3

state 15

    (8) logic -> expression LE . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 37
    logic                          shift and go to state 3

state 16

    (9) logic -> expression GE . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 38
    logic                          shift and go to state 3

state 17

    (10) logic -> expression < . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 39
    logic                          shift and go to state 3

state 18

    (11) logic -> expression > . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 40
    logic                          shift and go to state 3

state 19

    (15) expression -> - expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               reduce using rule 15 (expression -> - expression .)
    -               reduce using rule 15 (expression -> - expression .)
    *               reduce using rule 15 (expression -> - expression .)
    /               reduce using rule 15 (expression -> - expression .)
    ^               reduce using rule 15 (expression -> - expression .)
    EQ              reduce using rule 15 (expression -> - expression .)
    NEQ             reduce using rule 15 (expression -> - expression .)
    LE              reduce using rule 15 (expression -> - expression .)
    GE              reduce using rule 15 (expression -> - expression .)
    <               reduce using rule 15 (expression -> - expression .)
    >               reduce using rule 15 (expression -> - expression .)
    $end            reduce using rule 15 (expression -> - expression .)
    )               reduce using rule 15 (expression -> - expression .)
    ?               reduce using rule 15 (expression -> - expression .)
    AND             reduce using rule 15 (expression -> - expression .)
    OR              reduce using rule 15 (expression -> - expression .)
    :               reduce using rule 15 (expression -> - expression .)
    ,               reduce using rule 15 (expression -> - expression .)

  ! +               [ shift and go to state 8 ]
  ! -               [ shift and go to state 9 ]
  ! *               [ shift and go to state 10 ]
  ! /               [ shift and go to state 11 ]
  ! ^               [ shift and go to state 12 ]
  ! EQ              [ shift and go to state 13 ]
  ! NEQ             [ shift and go to state 14 ]
  ! LE              [ shift and go to state 15 ]
  ! GE              [ shift and go to state 16 ]
  ! <               [ shift and go to state 17 ]
  ! >               [ shift and go to state 18 ]


state 20

    (16) expression -> logic ? . expression : expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    logic                          shift and go to state 3
    expression                     shift and go to state 41

state 21

    (12) logic -> logic AND . logic
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression

    !               shift and go to state 7
    (               shift and go to state 29
    -               shift and go to state 2
    ID              shift and go to state 5
    NUMBER          shift and go to state 6

    logic                          shift and go to state 42
    expression                     shift and go to state 28

state 22

    (13) logic -> logic OR . logic
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression

    !               shift and go to state 7
    (               shift and go to state 29
    -               shift and go to state 2
    ID              shift and go to state 5
    NUMBER          shift and go to state 6

    logic                          shift and go to state 43
    expression                     shift and go to state 28

state 23

    (17) expression -> ( expression . )
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    )               shift and go to state 44
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18


state 24

    (18) logic -> ( logic . )
    (16) expression -> logic . ? expression : expression
    (12) logic -> logic . AND logic
    (13) logic -> logic . OR logic

    )               shift and go to state 45
    ?               shift and go to state 20
    AND             shift and go to state 21
    OR              shift and go to state 22


state 25

    (21) expression -> ID ( . list )
    (23) list -> . expression
    (24) list -> . expression , list
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    list                           shift and go to state 46
    expression                     shift and go to state 47
    logic                          shift and go to state 3

state 26

    (22) expression -> ID DEFINE . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 48
    logic                          shift and go to state 3

state 27

    (14) logic -> ! logic .
    (12) logic -> logic . AND logic
    (13) logic -> logic . OR logic
    (16) expression -> logic . ? expression : expression

    ?               reduce using rule 14 (logic -> ! logic .)
    AND             reduce using rule 14 (logic -> ! logic .)
    OR              reduce using rule 14 (logic -> ! logic .)
    )               reduce using rule 14 (logic -> ! logic .)

  ! AND             [ shift and go to state 21 ]
  ! OR              [ shift and go to state 22 ]
  ! ?               [ shift and go to state 20 ]


state 28

    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression

    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12


state 29

    (18) logic -> ( . logic )
    (17) expression -> ( . expression )
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression

    !               shift and go to state 7
    (               shift and go to state 29
    -               shift and go to state 2
    ID              shift and go to state 5
    NUMBER          shift and go to state 6

    logic                          shift and go to state 49
    expression                     shift and go to state 50

state 30

    (1) expression -> expression + expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               reduce using rule 1 (expression -> expression + expression .)
    -               reduce using rule 1 (expression -> expression + expression .)
    EQ              reduce using rule 1 (expression -> expression + expression .)
    NEQ             reduce using rule 1 (expression -> expression + expression .)
    LE              reduce using rule 1 (expression -> expression + expression .)
    GE              reduce using rule 1 (expression -> expression + expression .)
    <               reduce using rule 1 (expression -> expression + expression .)
    >               reduce using rule 1 (expression -> expression + expression .)
    $end            reduce using rule 1 (expression -> expression + expression .)
    )               reduce using rule 1 (expression -> expression + expression .)
    ?               reduce using rule 1 (expression -> expression + expression .)
    AND             reduce using rule 1 (expression -> expression + expression .)
    OR              reduce using rule 1 (expression -> expression + expression .)
    :               reduce using rule 1 (expression -> expression + expression .)
    ,               reduce using rule 1 (expression -> expression + expression .)
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12

  ! *               [ reduce using rule 1 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 1 (expression -> expression + expression .) ]
  ! ^               [ reduce using rule 1 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 8 ]
  ! -               [ shift and go to state 9 ]
  ! EQ              [ shift and go to state 13 ]
  ! NEQ             [ shift and go to state 14 ]
  ! LE              [ shift and go to state 15 ]
  ! GE              [ shift and go to state 16 ]
  ! <               [ shift and go to state 17 ]
  ! >               [ shift and go to state 18 ]


state 31

    (2) expression -> expression - expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               reduce using rule 2 (expression -> expression - expression .)
    -               reduce using rule 2 (expression -> expression - expression .)
    EQ              reduce using rule 2 (expression -> expression - expression .)
    NEQ             reduce using rule 2 (expression -> expression - expression .)
    LE              reduce using rule 2 (expression -> expression - expression .)
    GE              reduce using rule 2 (expression -> expression - expression .)
    <               reduce using rule 2 (expression -> expression - expression .)
    >               reduce using rule 2 (expression -> expression - expression .)
    $end            reduce using rule 2 (expression -> expression - expression .)
    )               reduce using rule 2 (expression -> expression - expression .)
    ?               reduce using rule 2 (expression -> expression - expression .)
    AND             reduce using rule 2 (expression -> expression - expression .)
    OR              reduce using rule 2 (expression -> expression - expression .)
    :               reduce using rule 2 (expression -> expression - expression .)
    ,               reduce using rule 2 (expression -> expression - expression .)
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12

  ! *               [ reduce using rule 2 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 2 (expression -> expression - expression .) ]
  ! ^               [ reduce using rule 2 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 8 ]
  ! -               [ shift and go to state 9 ]
  ! EQ              [ shift and go to state 13 ]
  ! NEQ             [ shift and go to state 14 ]
  ! LE              [ shift and go to state 15 ]
  ! GE              [ shift and go to state 16 ]
  ! <               [ shift and go to state 17 ]
  ! >               [ shift and go to state 18 ]


state 32

    (3) expression -> expression * expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               reduce using rule 3 (expression -> expression * expression .)
    -               reduce using rule 3 (expression -> expression * expression .)
    *               reduce using rule 3 (expression -> expression * expression .)
    /               reduce using rule 3 (expression -> expression * expression .)
    EQ              reduce using rule 3 (expression -> expression * expression .)
    NEQ             reduce using rule 3 (expression -> expression * expression .)
    LE              reduce using rule 3 (expression -> expression * expression .)
    GE              reduce using rule 3 (expression -> expression * expression .)
    <               reduce using rule 3 (expression -> expression * expression .)
    >               reduce using rule 3 (expression -> expression * expression .)
    $end            reduce using rule 3 (expression -> expression * expression .)
    )               reduce using rule 3 (expression -> expression * expression .)
    ?               reduce using rule 3 (expression -> expression * expression .)
    AND             reduce using rule 3 (expression -> expression * expression .)
    OR              reduce using rule 3 (expression -> expression * expression .)
    :               reduce using rule 3 (expression -> expression * expression .)
    ,               reduce using rule 3 (expression -> expression * expression .)
    ^               shift and go to state 12

  ! ^               [ reduce using rule 3 (expression -> expression * expression .) ]
  ! +               [ shift and go to state 8 ]
  ! -               [ shift and go to state 9 ]
  ! *               [ shift and go to state 10 ]
  ! /               [ shift and go to state 11 ]
  ! EQ              [ shift and go to state 13 ]
  ! NEQ             [ shift and go to state 14 ]
  ! LE              [ shift and go to state 15 ]
  ! GE              [ shift and go to state 16 ]
  ! <               [ shift and go to state 17 ]
  ! >               [ shift and go to state 18 ]


state 33

    (4) expression -> expression / expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               reduce using rule 4 (expression -> expression / expression .)
    -               reduce using rule 4 (expression -> expression / expression .)
    *               reduce using rule 4 (expression -> expression / expression .)
    /               reduce using rule 4 (expression -> expression / expression .)
    EQ              reduce using rule 4 (expression -> expression / expression .)
    NEQ             reduce using rule 4 (expression -> expression / expression .)
    LE              reduce using rule 4 (expression -> expression / expression .)
    GE              reduce using rule 4 (expression -> expression / expression .)
    <               reduce using rule 4 (expression -> expression / expression .)
    >               reduce using rule 4 (expression -> expression / expression .)
    $end            reduce using rule 4 (expression -> expression / expression .)
    )               reduce using rule 4 (expression -> expression / expression .)
    ?               reduce using rule 4 (expression -> expression / expression .)
    AND             reduce using rule 4 (expression -> expression / expression .)
    OR              reduce using rule 4 (expression -> expression / expression .)
    :               reduce using rule 4 (expression -> expression / expression .)
    ,               reduce using rule 4 (expression -> expression / expression .)
    ^               shift and go to state 12

  ! ^               [ reduce using rule 4 (expression -> expression / expression .) ]
  ! +               [ shift and go to state 8 ]
  ! -               [ shift and go to state 9 ]
  ! *               [ shift and go to state 10 ]
  ! /               [ shift and go to state 11 ]
  ! EQ              [ shift and go to state 13 ]
  ! NEQ             [ shift and go to state 14 ]
  ! LE              [ shift and go to state 15 ]
  ! GE              [ shift and go to state 16 ]
  ! <               [ shift and go to state 17 ]
  ! >               [ shift and go to state 18 ]


state 34

    (5) expression -> expression ^ expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    +               reduce using rule 5 (expression -> expression ^ expression .)
    -               reduce using rule 5 (expression -> expression ^ expression .)
    *               reduce using rule 5 (expression -> expression ^ expression .)
    /               reduce using rule 5 (expression -> expression ^ expression .)
    ^               reduce using rule 5 (expression -> expression ^ expression .)
    EQ              reduce using rule 5 (expression -> expression ^ expression .)
    NEQ             reduce using rule 5 (expression -> expression ^ expression .)
    LE              reduce using rule 5 (expression -> expression ^ expression .)
    GE              reduce using rule 5 (expression -> expression ^ expression .)
    <               reduce using rule 5 (expression -> expression ^ expression .)
    >               reduce using rule 5 (expression -> expression ^ expression .)
    $end            reduce using rule 5 (expression -> expression ^ expression .)
    )               reduce using rule 5 (expression -> expression ^ expression .)
    ?               reduce using rule 5 (expression -> expression ^ expression .)
    AND             reduce using rule 5 (expression -> expression ^ expression .)
    OR              reduce using rule 5 (expression -> expression ^ expression .)
    :               reduce using rule 5 (expression -> expression ^ expression .)
    ,               reduce using rule 5 (expression -> expression ^ expression .)

  ! +               [ shift and go to state 8 ]
  ! -               [ shift and go to state 9 ]
  ! *               [ shift and go to state 10 ]
  ! /               [ shift and go to state 11 ]
  ! ^               [ shift and go to state 12 ]
  ! EQ              [ shift and go to state 13 ]
  ! NEQ             [ shift and go to state 14 ]
  ! LE              [ shift and go to state 15 ]
  ! GE              [ shift and go to state 16 ]
  ! <               [ shift and go to state 17 ]
  ! >               [ shift and go to state 18 ]


state 35

    (6) logic -> expression EQ expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    ?               reduce using rule 6 (logic -> expression EQ expression .)
    AND             reduce using rule 6 (logic -> expression EQ expression .)
    OR              reduce using rule 6 (logic -> expression EQ expression .)
    )               reduce using rule 6 (logic -> expression EQ expression .)
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18


state 36

    (7) logic -> expression NEQ expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    ?               reduce using rule 7 (logic -> expression NEQ expression .)
    AND             reduce using rule 7 (logic -> expression NEQ expression .)
    OR              reduce using rule 7 (logic -> expression NEQ expression .)
    )               reduce using rule 7 (logic -> expression NEQ expression .)
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18


state 37

    (8) logic -> expression LE expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    ?               reduce using rule 8 (logic -> expression LE expression .)
    AND             reduce using rule 8 (logic -> expression LE expression .)
    OR              reduce using rule 8 (logic -> expression LE expression .)
    )               reduce using rule 8 (logic -> expression LE expression .)
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18


state 38

    (9) logic -> expression GE expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    ?               reduce using rule 9 (logic -> expression GE expression .)
    AND             reduce using rule 9 (logic -> expression GE expression .)
    OR              reduce using rule 9 (logic -> expression GE expression .)
    )               reduce using rule 9 (logic -> expression GE expression .)
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18


state 39

    (10) logic -> expression < expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    ?               reduce using rule 10 (logic -> expression < expression .)
    AND             reduce using rule 10 (logic -> expression < expression .)
    OR              reduce using rule 10 (logic -> expression < expression .)
    )               reduce using rule 10 (logic -> expression < expression .)
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18


state 40

    (11) logic -> expression > expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    ?               reduce using rule 11 (logic -> expression > expression .)
    AND             reduce using rule 11 (logic -> expression > expression .)
    OR              reduce using rule 11 (logic -> expression > expression .)
    )               reduce using rule 11 (logic -> expression > expression .)
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18


state 41

    (16) expression -> logic ? expression . : expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    :               shift and go to state 51
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18


state 42

    (12) logic -> logic AND logic .
    (12) logic -> logic . AND logic
    (13) logic -> logic . OR logic
    (16) expression -> logic . ? expression : expression

    ?               reduce using rule 12 (logic -> logic AND logic .)
    AND             reduce using rule 12 (logic -> logic AND logic .)
    OR              reduce using rule 12 (logic -> logic AND logic .)
    )               reduce using rule 12 (logic -> logic AND logic .)

  ! AND             [ shift and go to state 21 ]
  ! OR              [ shift and go to state 22 ]
  ! ?               [ shift and go to state 20 ]


state 43

    (13) logic -> logic OR logic .
    (12) logic -> logic . AND logic
    (13) logic -> logic . OR logic
    (16) expression -> logic . ? expression : expression

    ?               reduce using rule 13 (logic -> logic OR logic .)
    OR              reduce using rule 13 (logic -> logic OR logic .)
    )               reduce using rule 13 (logic -> logic OR logic .)
    AND             shift and go to state 21

  ! AND             [ reduce using rule 13 (logic -> logic OR logic .) ]
  ! OR              [ shift and go to state 22 ]
  ! ?               [ shift and go to state 20 ]


state 44

    (17) expression -> ( expression ) .

    +               reduce using rule 17 (expression -> ( expression ) .)
    -               reduce using rule 17 (expression -> ( expression ) .)
    *               reduce using rule 17 (expression -> ( expression ) .)
    /               reduce using rule 17 (expression -> ( expression ) .)
    ^               reduce using rule 17 (expression -> ( expression ) .)
    EQ              reduce using rule 17 (expression -> ( expression ) .)
    NEQ             reduce using rule 17 (expression -> ( expression ) .)
    LE              reduce using rule 17 (expression -> ( expression ) .)
    GE              reduce using rule 17 (expression -> ( expression ) .)
    <               reduce using rule 17 (expression -> ( expression ) .)
    >               reduce using rule 17 (expression -> ( expression ) .)
    $end            reduce using rule 17 (expression -> ( expression ) .)
    )               reduce using rule 17 (expression -> ( expression ) .)
    ?               reduce using rule 17 (expression -> ( expression ) .)
    AND             reduce using rule 17 (expression -> ( expression ) .)
    OR              reduce using rule 17 (expression -> ( expression ) .)
    :               reduce using rule 17 (expression -> ( expression ) .)
    ,               reduce using rule 17 (expression -> ( expression ) .)


state 45

    (18) logic -> ( logic ) .

    ?               reduce using rule 18 (logic -> ( logic ) .)
    AND             reduce using rule 18 (logic -> ( logic ) .)
    OR              reduce using rule 18 (logic -> ( logic ) .)
    )               reduce using rule 18 (logic -> ( logic ) .)


state 46

    (21) expression -> ID ( list . )

    )               shift and go to state 52


state 47

    (23) list -> expression .
    (24) list -> expression . , list
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    )               reduce using rule 23 (list -> expression .)
    ,               shift and go to state 53
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18


state 48

    (22) expression -> ID DEFINE expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    $end            reduce using rule 22 (expression -> ID DEFINE expression .)
    )               reduce using rule 22 (expression -> ID DEFINE expression .)
    ?               reduce using rule 22 (expression -> ID DEFINE expression .)
    AND             reduce using rule 22 (expression -> ID DEFINE expression .)
    OR              reduce using rule 22 (expression -> ID DEFINE expression .)
    :               reduce using rule 22 (expression -> ID DEFINE expression .)
    ,               reduce using rule 22 (expression -> ID DEFINE expression .)
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18

  ! +               [ reduce using rule 22 (expression -> ID DEFINE expression .) ]
  ! -               [ reduce using rule 22 (expression -> ID DEFINE expression .) ]
  ! *               [ reduce using rule 22 (expression -> ID DEFINE expression .) ]
  ! /               [ reduce using rule 22 (expression -> ID DEFINE expression .) ]
  ! ^               [ reduce using rule 22 (expression -> ID DEFINE expression .) ]
  ! EQ              [ reduce using rule 22 (expression -> ID DEFINE expression .) ]
  ! NEQ             [ reduce using rule 22 (expression -> ID DEFINE expression .) ]
  ! LE              [ reduce using rule 22 (expression -> ID DEFINE expression .) ]
  ! GE              [ reduce using rule 22 (expression -> ID DEFINE expression .) ]
  ! <               [ reduce using rule 22 (expression -> ID DEFINE expression .) ]
  ! >               [ reduce using rule 22 (expression -> ID DEFINE expression .) ]


state 49

    (18) logic -> ( logic . )
    (12) logic -> logic . AND logic
    (13) logic -> logic . OR logic
    (16) expression -> logic . ? expression : expression

    )               shift and go to state 45
    AND             shift and go to state 21
    OR              shift and go to state 22
    ?               shift and go to state 20


state 50

    (17) expression -> ( expression . )
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression

    )               shift and go to state 44
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12


state 51

    (16) expression -> logic ? expression : . expression
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    logic                          shift and go to state 3
    expression                     shift and go to state 54

state 52

    (21) expression -> ID ( list ) .

    +               reduce using rule 21 (expression -> ID ( list ) .)
    -               reduce using rule 21 (expression -> ID ( list ) .)
    *               reduce using rule 21 (expression -> ID ( list ) .)
    /               reduce using rule 21 (expression -> ID ( list ) .)
    ^               reduce using rule 21 (expression -> ID ( list ) .)
    EQ              reduce using rule 21 (expression -> ID ( list ) .)
    NEQ             reduce using rule 21 (expression -> ID ( list ) .)
    LE              reduce using rule 21 (expression -> ID ( list ) .)
    GE              reduce using rule 21 (expression -> ID ( list ) .)
    <               reduce using rule 21 (expression -> ID ( list ) .)
    >               reduce using rule 21 (expression -> ID ( list ) .)
    $end            reduce using rule 21 (expression -> ID ( list ) .)
    )               reduce using rule 21 (expression -> ID ( list ) .)
    ?               reduce using rule 21 (expression -> ID ( list ) .)
    AND             reduce using rule 21 (expression -> ID ( list ) .)
    OR              reduce using rule 21 (expression -> ID ( list ) .)
    :               reduce using rule 21 (expression -> ID ( list ) .)
    ,               reduce using rule 21 (expression -> ID ( list ) .)


state 53

    (24) list -> expression , . list
    (23) list -> . expression
    (24) list -> . expression , list
    (1) expression -> . expression + expression
    (2) expression -> . expression - expression
    (3) expression -> . expression * expression
    (4) expression -> . expression / expression
    (5) expression -> . expression ^ expression
    (15) expression -> . - expression
    (16) expression -> . logic ? expression : expression
    (17) expression -> . ( expression )
    (19) expression -> . ID
    (20) expression -> . NUMBER
    (21) expression -> . ID ( list )
    (22) expression -> . ID DEFINE expression
    (6) logic -> . expression EQ expression
    (7) logic -> . expression NEQ expression
    (8) logic -> . expression LE expression
    (9) logic -> . expression GE expression
    (10) logic -> . expression < expression
    (11) logic -> . expression > expression
    (12) logic -> . logic AND logic
    (13) logic -> . logic OR logic
    (14) logic -> . ! logic
    (18) logic -> . ( logic )

    -               shift and go to state 2
    (               shift and go to state 4
    ID              shift and go to state 5
    NUMBER          shift and go to state 6
    !               shift and go to state 7

    expression                     shift and go to state 47
    list                           shift and go to state 55
    logic                          shift and go to state 3

state 54

    (16) expression -> logic ? expression : expression .
    (1) expression -> expression . + expression
    (2) expression -> expression . - expression
    (3) expression -> expression . * expression
    (4) expression -> expression . / expression
    (5) expression -> expression . ^ expression
    (6) logic -> expression . EQ expression
    (7) logic -> expression . NEQ expression
    (8) logic -> expression . LE expression
    (9) logic -> expression . GE expression
    (10) logic -> expression . < expression
    (11) logic -> expression . > expression

    $end            reduce using rule 16 (expression -> logic ? expression : expression .)
    )               reduce using rule 16 (expression -> logic ? expression : expression .)
    ?               reduce using rule 16 (expression -> logic ? expression : expression .)
    AND             reduce using rule 16 (expression -> logic ? expression : expression .)
    OR              reduce using rule 16 (expression -> logic ? expression : expression .)
    :               reduce using rule 16 (expression -> logic ? expression : expression .)
    ,               reduce using rule 16 (expression -> logic ? expression : expression .)
    +               shift and go to state 8
    -               shift and go to state 9
    *               shift and go to state 10
    /               shift and go to state 11
    ^               shift and go to state 12
    EQ              shift and go to state 13
    NEQ             shift and go to state 14
    LE              shift and go to state 15
    GE              shift and go to state 16
    <               shift and go to state 17
    >               shift and go to state 18

  ! +               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! -               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! *               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! /               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! ^               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! EQ              [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! NEQ             [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! LE              [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! GE              [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! <               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]
  ! >               [ reduce using rule 16 (expression -> logic ? expression : expression .) ]


state 55

    (24) list -> expression , list .

    )               reduce using rule 24 (list -> expression , list .)

